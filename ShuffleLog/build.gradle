// Add a build dependency on Packr to build native executables
buildscript {
    dependencies {
        classpath files("build-libs/packr-all-4.0.0.jar")
    }
}

import com.badlogicgames.packr.*;

plugins {
    id 'java'
    id 'edu.wpi.first.WpilibTools' version '1.1.0'
}

group 'com.swrobotics'
version '2024'

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

// ALL of these should be updated when updating WPILib version
// They are found in https://github.com/wpilibsuite/GradleRIO/blob/main/src/main/java/edu/wpi/first/gradlerio/wpi/WPIVersionsExtension.java
def WPILIB_VERSION = '2024.3.1'
def JACKSON_VERSION = '2.15.2'
def EJML_VERSION = '0.43.1'
def QUICKBUF_VERSION = '1.3.2'

def P5X_VERSION = '0.353.0-beta-3'
def LWJGL_VERSION = '3.3.1'
def IMGUI_VERSION = '1.86.4'

wpilibTools.deps.wpilibVersion = WPILIB_VERSION

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpimath")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("ntcore")

static def lwjglModule(module) {
    def prefix = 'org.lwjgl:lwjgl'
    if (module != null) prefix += '-' + module

    return [
            prefix,
            prefix + '::natives-linux',
            prefix + '::natives-linux-arm64',
            prefix + '::natives-linux-arm32',
            prefix + '::natives-macos',
            prefix + '::natives-windows',
            prefix + '::natives-windows-x86'
    ]
}

dependencies {
    implementation project(':Messenger:MessengerClient')
    implementation project(':MathLib')

    implementation "org.praxislive.libp5x:processing-core:${P5X_VERSION}"
    implementation("org.praxislive.libp5x:processing-lwjgl:${P5X_VERSION}") {
        exclude group: 'org.lwjgl'
    }

    implementation "io.github.spair:imgui-java-binding:${IMGUI_VERSION}"
    implementation "io.github.spair:imgui-java-natives-linux:${IMGUI_VERSION}"
    implementation "io.github.spair:imgui-java-natives-macos:${IMGUI_VERSION}"
    implementation "io.github.spair:imgui-java-natives-windows:${IMGUI_VERSION}"
    implementation("io.github.spair:imgui-java-lwjgl3:${IMGUI_VERSION}") {
        exclude group: 'org.lwjgl'
    }

    implementation platform("org.lwjgl:lwjgl-bom:${LWJGL_VERSION}")
    implementation lwjglModule(null)
    implementation lwjglModule('assimp')
    implementation lwjglModule('glfw')
    implementation lwjglModule('opengl')
    implementation lwjglModule('stb')

    implementation "com.fazecast:jSerialComm:2.9.3"

    implementation wpilibTools.deps.wpilibJava("wpiutil")
    implementation wpilibTools.deps.wpilibJava("wpimath")
    implementation wpilibTools.deps.wpilibJava("wpinet")
    implementation wpilibTools.deps.wpilibJava("ntcore")

    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: JACKSON_VERSION
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: JACKSON_VERSION
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: JACKSON_VERSION
    implementation group: "us.hebi.quickbuf", name: "quickbuf-runtime", version: QUICKBUF_VERSION

    implementation group: "org.ejml", name: "ejml-simple", version: EJML_VERSION
    implementation group: "org.joml", name: "joml", version: "1.10.5"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation "com.jcraft:jsch:0.1.55"
}

jar {
    dependsOn ':Messenger:MessengerClient:jar'
    dependsOn ':MathLib:jar'

    manifest {
        attributes 'Main-Class': 'com.swrobotics.shufflelog.ShuffleLog'
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

def JRE_LINUX_X64 = "OpenJDK11U-jre_x64_linux_hotspot_11.0.17_8.tar.gz"
def JRE_WINDOWS_X64 = "OpenJDK11U-jre_x64_windows_hotspot_11.0.17_8.zip"

static boolean deleteDirectory(File directoryToBeDeleted) {
    File[] allContents = directoryToBeDeleted.listFiles()
    if (allContents != null) {
        for (File file : allContents) {
            deleteDirectory(file)
        }
    }
    return directoryToBeDeleted.delete()
}

static void packForPlatform(platform, jre) {
    def JRE_DOWNLOAD_ROOT = "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/"

    System.out.println((Object) "Packing executable for ${platform} with jre ${jre}")

    def workingPath = System.getProperty("user.dir")
    def workingDir = new File(workingPath)

    def s = File.separator
    def outDir = new File(workingDir, "ShuffleLog${s}build${s}pack${s}${platform}")
    deleteDirectory(outDir)
    outDir.mkdirs()

    def packConfig = new PackrConfig(
            platform,
            (JRE_DOWNLOAD_ROOT + jre).toString(),
            "ShuffleLog-${platform}".toString(),
            Arrays.asList("${workingPath}${s}ShuffleLog${s}build${s}libs${s}ShuffleLog-2023.jar".toString()),
            'com.swrobotics.shufflelog.ShuffleLog'.toString(),
            outDir
    )
    packConfig.vmArgs = new ArrayList<>()
    packConfig.jrePath = "jre"

    new Packr().pack(packConfig)
}

tasks.register("pack") {
    dependsOn "jar"
    doLast {
        packForPlatform(PackrConfig.Platform.Windows64, JRE_WINDOWS_X64)
        packForPlatform(PackrConfig.Platform.Linux64, JRE_LINUX_X64)
    }
}
